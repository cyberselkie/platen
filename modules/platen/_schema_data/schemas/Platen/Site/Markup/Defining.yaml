# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id: Defining.schema.yaml
title: Defining Markup Renderers
description: Defines a valid markup renderer for Platen
schematize:
  details: |
    Platen site and theme developers sometimes need to override how codeblocks, images, links, and
    headers are rendered into HTML for a page. These settings allow developers to add new rendering
    options.

    Defined renderers must follow these conventions or they'll break rendering for users:

    1. Defined renderers must analyze the incoming parameters to see if the renderer should be
       applied in this instance. For example, a link renderer might check for a `foo:` prefix in the
       link text and skip any links without that prefix.
    1. Defined renderers must return a string value.
       
       1. When an instance is skipped by a renderer, it must return an empty string `""`.
       1. When an instance is processed by a renderer, it must return the HTML. There's no need to
          specify `safeHTML` for the return text.
    
    Only one renderer can be successfully applied to an instance. When a renderer returns a
    non-empty string representing the rendered instance, all remaining renderers are skipped and
    the default renderer isn't applied.

    If no renderers apply to an instance, the default renderer is used instead.
type: object
properties:
  Enabled:
    title: Enable the Renderer
    description: Whether the renderer should be used for content.
    schematize:
      weight: 1
      details: |
        Specifies whether the renderer should be used for content. When adding a renderer to your
        theme, you must define this value in the theme configuration that is merged with a site's.

        You can choose whether to default this value to `true` or `false` and a site maintainer can
        override it in their own configuration.

        When this value is set to `true`, the renderer is applied before the default renderer. When
        this value is set to `false`, the renderer is ignored.
    type: boolean
  Partials:
    title: Feature Partials
    description: Define a map of partials for Platen to inject as needed.
    schematize:
      details: |
        Define a map of partials for Platen to inject as needed. These partials are only
        injected when [sref:`Enabled`] is set to `true`.

        <!-- Reference Links -->
        [sref:`Enabled`]: Platen.Site.Features.Defining.Enabled
      weight: 2
      skipSchemaRender: true
    type: object
    properties:
      Header:
        title: Header Partial
        description: Injects a partial into the HTML header.
        schematize:
          weight: 1
          details: |
            If specified, this partial is processed in the HTML header. This is useful for adding
            standalone styles, scripts, and metadata. To add a style that uses the SCSS style
            modules defined in the [sref:`Theme`] settings, add a new map to [sref:`Theme.Styles`]
            or specify a [sref:`Style`] partial for the feature.

            The partial is given the current page's context.

            <!-- Reference Links -->
            [sref:`Theme`]: Platen.Site.Theme.Config
            [sref:`Theme.Styles`]: Platen.Site.Theme.Config.Styles
            [sref:`Style`]: Platen.Site.Features.Defining.Partials.Style
        type: string
      Renderers:
        title: Renderer Partials
        description: Registers one or more partials that act as render hooks.
        type: object
        schematize:
          details: |
            Defines a map of partials to use as Markdown render hooks. Like all partials, these are
            only processed when `Enabled` is set to `true`.

            Supported renderer partials include:

            - [sref:`Codeblock`], processed for fenced code blocks with a language ID
            - [sref:`Heading`], processed for headings
            - [sref:`Image`], processed for image links
            - [sref:`Link`], processed for non-image links

            In all cases, all renderer partials for enabled features are checked one after the other
            unless they return a render string. Once an applicable partial returns a render string,
            no further render hook partials are processed for that specific content.

            <!-- Reference Links -->
            [sref:`Codeblock`]: Platen.Site.Features.Renderers.Codeblock
            [sref:`Heading`]: Platen.Site.Features.Renderers.Heading
            [sref:`Image`]: Platen.Site.Features.Renderers.Image
            [sref:`Link`]: Platen.Site.Features.Renderers.Link
        properties:
          Codeblock:
            title: Codeblock Render Hook Partial
            description: Adds a partial to call when processing the codeblock render hook.
            schematize:
              weight: 1
              details: |
                If specified, this partial is processed when a fenced codeblock with a language ID
                is rendered from Markdown. This support is in addition to Hugo's normal method for
                adding [codeblock render hooks][01] per language.
                
                In Platen, codeblock render hook partials registered by features are processed one
                at a time for each enabled feature with a defined codeblock render hook partial
                until one of them returns a non-empty string representing the rendered content.

                If no codeblock render hook partial returns a rendered string, the default codeblock
                render hook is called instead. The first codeblock render hook partial to return a
                non-empty string ends the render hook processing. Any remaining render hook partials
                are never processed for that codeblock.

                A feature can only define one codeblock render hook partial.

                For more information about defining codeblock render hook partials, see
                [Defining a Codeblock Render Hook Partial][02] in the [Theme Guide][03].

                <!-- Reference Links -->
                [01]: https://gohugo.io/templates/render-hooks/#render-hooks-for-code-blocks
                [02]: /styling
                [03]: /styling
            type: string
          Heading:
            title: Heading Render Hook Partial
            description: Adds a partial to call when processing the heading render hook.
            schematize:
              weight: 2
              details: |
                If specified, this partial is processed when a heading is rendered from Markdown.
                This support allows you to extend the default heading render hook without replacing
                it. You can still [define additional heading render hooks][01] on a
                per-output-format basis, like a custom heading output for content in an RSS feed.
                
                In Platen, heading render hook partials registered by features are processed one at
                a time for each enabled feature with a defined heading render hook partial until one
                of them returns a non-empty string representing the rendered content.

                If no heading render hook partial returns a rendered string, the default heading
                render hook is called instead. The first heading render hook partial to return a
                non-empty string ends the render hook processing. Any remaining render hook partials
                are never processed for that heading.

                A feature can only define one heading render hook partial.

                For more information about defining heading render hook partials, see
                [Defining a Heading Render Hook Partial][02] in the [Theme Guide][03].

                [01]: https://gohugo.io/templates/render-hooks/#render-hooks-for-headings-links-and-images
                [02]: /styling
                [03]: /styling
            type: string
          Image:
            title: Image Render Hook Partial
            description: Adds a partial to call when processing the image render hook.
            schematize:
              weight: 3
              details: |
                If specified, this partial is processed when a image is rendered from Markdown. This
                support allows you to extend the default image render hook without replacing it. You
                can still [define additional image render hooks][01] on a per-output-format basis,
                like a custom image output for content in an RSS feed.
                
                In Platen, image render hook partials registered by features are processed one at a
                time for each enabled feature with a defined image render hook partial until one of
                them returns a non-empty string representing the rendered content.

                If no image render hook partial returns a rendered string, the default image render
                hook is called instead. The first image render hook partial to return a non-empty
                string ends the render hook processing. Any remaining render hook partials are never
                processed for that image.

                A feature can only define one image render hook partial.

                For more information about defining image render hook partials, see
                [Defining a Heading Render Hook Partial][02] in the [Theme Guide][03].

                <!-- Reference Links -->
                [01]: https://gohugo.io/templates/render-hooks/#render-hooks-for-headings-links-and-images
                [02]: /styling
                [03]: /styling
            type: string
          Link:
            title: Link Render Hook Partial
            description: Adds a partial to call when processing the link render hook.
            schematize:
              weight: 4
              details: |
                If specified, this partial is processed when a link is rendered from Markdown. This
                support allows you to extend the default link render hook without replacing it. You
                can still [define additional link render hooks][01] on a per-output-format basis,
                like a custom link output for content in an RSS feed.
                
                In Platen, link render hook partials registered by features are processed one at a
                time for each enabled feature with a defined link render hook partial until one of
                them returns a non-empty string representing the rendered content.

                If no link render hook partial returns a rendered string, the default link render
                hook is called instead. The first link render hook partial to return a non-empty
                string ends the render hook processing. Any remaining render hook partials are never
                processed for that link.

                A feature can only define one link render hook partial.

                For more information about defining link render hook partials, see
                [Defining a Heading Render Hook Partial][02] in the [Theme Guide][03].

                [01]: https://gohugo.io/templates/render-hooks/#render-hooks-for-headings-links-and-images
                [02]: /styling
                [03]: /styling
            type: string
      Style:
        title: Style Partial
        description: Injects a partial into the site's SCSS.
        schematize:
          weight: 4
          details: |
            If specified, this partial is processed in `platen.scss`, which defines the site's
            style. This partial is processed after the theme's builtin styles and feature styles,
            allowing it to depend on styles defined by the theme or a feature. Use this partial to
            have more control over how the style is handled, like if you need to use configuration
            options.

            If the style doesn't rely on any configuration specific to the markup itself, you can
            use the [sref:Simple Style Module] setting instead.

            The partial is given the current page's context. Note that when importing SCSS
            modules from this partial, the path is relative to `styles/platen.scss`, not the
            root of the `assets` folder. To import an SCSS module in `assets/myMarkup`, you
            need to specify the path as `../myMarkup/foo`, not `myMarkup/foo`.

            [sref:Simple Style Module]: Platen.Site.Markup.Defining.Style
        type: string
  Style:
    title: Markup Simple Style Module
    description: Defines the markup's simple style module
    schematize:
      weight: 2
      skipSchemaRender: true
      details: |
        Defines the name of the markup's style module. This setting can be omitted if the
        markup has no specific styling needs (if it relies on existing or otherwise
        defined CSS or SCSS values to style its output).

        This setting is for style modules that don't require any special handling. If you need to
        pass any settings to the style module, use the [sref:`Partials.Style`] setting instead.

        If it needs its own SCSS, add the module to the `assets/styles/markup` folder and set
        this value to the SCSS module's name. 

        [sref:`Partials.Style`]: Platen.Site.Markup.Defining.Partials.Style
    type: string