# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id: tabs.schema.yaml
title: Tabs
description: Defines the options for Platen's tabs markup
schematize:
  details: |
    Defines the map of options for Platen's [tabs markup][01]. The existing value is a map that includes whether or not
    to enable the codeblock render hook and the style definition for it.

    When this markup is enabled, you can create tabbed content on a page with a [codeblock][01].

    Note that Platen is migrating from the [legacy template][02] to a new template that uses [sref:Shoelace][03] to add
    a more customizable and extensible element to your site.

    The legacy template has a more limited set of options than the new default template and it will eventually be
    removed. We strongly recommend you set [sref:`use_legacy`][04] to `false` and migrate your site's custom styling
    and scripting to use the new template.

    For now, Platen defaults to using the legacy template but warns you that the legacy template will eventually be
    removed. You can silence this warning by setting [sref:`warn_on_legacy`][05] to `false`.

    You can add new keys or replace the values for existing ones. You don't need to keep the full list of all
    properties in your own configuration file. Only specify the values you want to add or replace.

    <!-- Reference Links -->
    [01]: /modules/platen/markup/tabs
    [02]: /modules/platen/markup/tabs#legacy-template
    [03]: sl:
    [04]: platen.site.markup.tabs.use_legacy
    [05]: platen.site.markup.tabs.warn_on_legacy
type: object
properties:
  enabled:
    title: Enable the markup
    description: Choose whether tabs codeblock rendering is available for the site.
    schematize:
      weight: 1
      details: |
        Choose whether the site renders codeblocks with the `tabs` language ID as a group of tabs.
        If this setting is set to `true`, content inside the codeblock is added inside a `<div>`
        that renders child divs as tabs. If this setting is `false`, the content is rendered as an
        unhighlighted codeblock.
    type: boolean
    default: true
  aliases:
    title: Aliases
    description: Defines additional language IDs for the codeblock render hook.
    schematize:
      weight: 2
      details: |
        Define one or more language IDs to use in addition to the default language IDs for
        codeblocks that render their content in a group of divs as tabs. The default for the
        top-level codeblock for the column group is `tabs`. The default for the nested codeblock
        defining a single column is `tab`.

        You can specify a string, a map, or an array of strings or maps for this value. If the value
        is an array, each item in the array is added as an alias.

        String values are added as valid language IDs for the top-level codeblock in addition to
        `tabs`.

        Map values must have either the `group` or `entry` key with a string value. If you
        define a value for `group`, it becomes a valid language ID for the top-level codeblock. If
        you define a value for `entry`, it becomes a valid language ID for the nested codeblock. You
        can specify both in a single map but don't have to.
    oneOf:
      - type: array
        items:
          oneOf:
          - type: object
            description: >-
              A map defining either/both an alias for the grouping and entry codeblock language ID.
            properties:
              entry:
                title: Entry Alias
                description: Alias for the nested codeblock language ID, (default is 'tab').
                type: string
              group:
                title: Group Alias
                description: Alias for the top-level codeblock language ID, (default is 'tabs').
                type: string
          - type: string
      - type: object
        description: >-
          A map defining either/both an alias for the grouping and entry codeblock language ID.
        properties:
          entry:
            title: Entry Alias
            description: Alias for the nested codeblock language ID, (default is 'tab').
            type: string
          group:
            title: Group Alias
            description: Alias for the top-level codeblock language ID, (default is 'tabs').
            type: string
      - type: string
  custom:
    title: Use Custom Rendering Template
    description: Choose whether tabs rendering uses a custom template.
    schematize:
      details: |
        Choose whether tabs are rendered with a custom template. The default value is `false`. When this value is
        `true`, Platen uses the `platen/markup/tabs/templates/custom/group.html` partial template for rendering the
        tabs container and `tab.html` in the same folder for rendering individual tabs. When this value is a string,
        Platen uses that value as the name of the folder in the `platen/markup/tabs/templates` folder to look for the
        `group.html` and `tabs.html` partial templates.

        If a tabs markup defines the [`custom` option][01], the value defined on the markup overrides this setting.

        For more information, see [Custom Templates][02].

        <!-- Reference Links -->
        [01]: /modules/platen/markup/tabs#options-custom
        [02]: /modules/platen/markup/tabs#custom-templates
      weight: 3
    default: false
    oneOf:
      - type: boolean
      - type: string
  classes:
    title: Default Classes
    description: Add classes to tabs containers unless overridden in the markup.
    schematize:
      details: |
        You can add any number of classes to rendered tabs containers by default. Specify one or more strings as items
        in an array. They're inserted for all tabs containers as if they had been specified with the `class`
        [attribute][01] or [option][02] in the markup.
        
        If the attribute or option are specified for a tab group, those values override the list defined by this
        setting.

        <!-- Reference Links -->
        [01]: /modules/platen/markup/tabs#attributes-class
        [02]: /modules/platen/markup/tabs#options-class
      weight: 4
    default: []
    type: array
    items:
      type: string
  activation:
    title: Default Activation Mode
    description: Specify whether tabs should be automatically shown on navigation or require manual activation to show.
    schematize:
      details: |
        You can define a default activation mode for a tab group. When the tab group is focused, keyboard users can
        press the [kbd:Left]() and [kbd:Right]() keys to select the desired tab.

        When the value of this option is `auto`, the selected tab is shown immediately.

        To require the user to press [kbd:Space]() or [kbd:Enter]() to show the tab, set this value to `manual`.

        If the [`activation` option][01] is specified for a tab group in the markup, that value override this setting.

        <!-- Link References -->
        [01]: /modules/platen/markup/tabs#options-activation
      weight: 5
    default: auto
    type: string
    enum:
      - auto
      - manual
  no_scroll_controls:
    title: Disable Scroll Controls for Tab Groups
    description: Specify whether tab groups should display arrows when the tabs overflow.
    schematize:
      details: |
        Specify whether the scroll arrows should be visible when tabs overflow. Set this value to `true` to disable the
        scroll arrows.

        If the [`no_scroll_controls` option][01] is specified for a tab group in the markup, that value override this
        setting.

        <!-- Link References -->
        [01]: /modules/platen/markup/tabs#options-no_scroll_controls
      weight: 6
    default: false
    type: boolean
  placement:
    title: Default Tabs Placement
    description: Specify where the tabs should be rendered relative to their content.
    schematize:
      details: |
        Specify where the tabs should be rendered relative to their content. When the placement is `top` or `bottom`
        and the tabs overflow the available horizontal width, they can be scrolled. You can disable the scroll arrows
        displayed when the tabs overflow by setting `no_scroll_controls` in your [sref:site settings][01] or in the
        [options][02] for a tab group.

        If the [`placement` option][02] is specified for a tab group in the markup, that value override this setting.

        <!-- Link References -->
        [01]: platen.site.markup.tabs.no_scroll_controls
        [02]: /modules/platen/markup/tabs#options-placement
      weight: 7
    type: string
    default: top
    enum:
      - top
      - bottom
      - start
      - end
  standardize_height:
    title: Standardize Tab Heights
    description: Specify whether the tabs in a group should be rendered with the same height as the tallest tab panel.
    schematize:
      weight: 8
      details: |
        Specify whether the tabs in every group should be rendered with the same height as the tallest tab panel in the
        group. This can help to reduce how much the page's layout updates when a reader switches between tabs in a
        group. Set this value to `true` to standardize the height of the tabs.

        If the [`standardize_height` option][01] is specified for a tab group in the markup, that value overrides this
        setting.

        <!-- Link References -->
        [01]: /modules/platen/markup/tabs#options-standardize_height
    type: boolean
    default: false
  preset:
    title: Default Preset
    description: Specify the dot-path to a preset to use as the default for this markup.
    schematize:
      details: |
        You can define any number of preset tab groups and tabs reusably in your site's data. Any YAML files you add in
        the `data/platen/tabs` folder are available for use. You can use folders to group presets together. For more
        information about presets, see [Presets][01] in the reference documentation for the markup.

         [01]: /modules/platen/markup/tabs#presets
      weight: 9
    type: string
  use_legacy:
    title: Use Legacy Template
    description: Set whether rendered tabs use the legacy template by default.
    schematize:
      details: |
        Use this setting to configure whether Platen uses the [legacy template][01] for tabs markup. The default
        value is `true`. Set this value to `false` to use the new template by default.

        The legacy template has a more limited set of options than the new default template and it will eventually
        be removed. We strongly recommend you set this value to `true` and migrate your site's custom styling and
        scripting to use the new template.

        If you use the [`legacy` option][02] for tabs markup in your content, this value is overriden by that
        option.

        For more information, see [Legacy Template][01] in the reference documentation for this markup.

        <!-- Reference Link Definitions -->
        [01]: /modules/platen/markup/tabs#legacy-template
        [02]: /modules/platen/markup/tabs#option-legacy
      weight: 98
    default: true
    type: boolean
  warn_on_legacy:
    title: Warn When Using the Legacy Template
    description: Set whether Platen warns when you use the legacy template.
    schematize:
      details: |
        Use this setting to configure whether Platen raises a warning when you use a [legacy template][01] for your
        tabs markup. Set this value to `false` to disable the warning. The default value is `true`.

        The legacy template has a more limited set of options than the new default template and it will eventually be
        removed. We strongly recommend you set [sref:`use_legacy`][02] to `false` and migrate your site's custom
        styling and scripting to use the new template.

        For more information, see [Legacy Template][01] in the reference documentation for this markup.

        <!-- Reference Link Definitions -->
        [01]: /modules/platen/markup/tabs#legacy-template
        [02]: platen.site.markup.tabs.use_legacy
      weight: 99
    default: true
    type: boolean
  partials:
    title: Markup Partials
    description: Define a map of partials for Platen to inject as needed.
    schematize:
      details: |
        Define a map of partials for Platen to inject as needed. These partials are only
        injected when [sref:`enabled`] is set to `true`.

        <!-- Reference Links -->
        [sref:`enabled`]: platen.site.markup.tabs.enabled
      weight: 100
      skip_schema_render: true
    type: object
    properties:
      renderers:
        title: Renderer Partials
        description: Registers one or more partials that act as render hooks.
        type: object
        schematize:
          weight: 2
          skip_schema_render: true
          details: |
            Defines a map of partials to use as Markdown render hooks. Like all partials, these are
            only processed when [sref:`enabled`] is set to `true`.

            Supported renderer partials include:

            - `codeblock`, processed for fenced code blocks with a language ID
            - `heading`, processed for headings
            - `image`, processed for image links
            - `link`, processed for non-image links

            In all cases, all renderer partials for enabled features and markup options are checked
            one after the other unless they return a render string. Only the first applicable
            partial that returns a render string is processed and rendered.

            <!-- Reference Links -->
            [sref:`enabled`]: platen.site.markup.tabs.enabled
        properties:
          codeblock:
            title: Codeblock Render Hook Partial
            description: Adds a partial to call when processing the codeblock render hook.
            schematize:
              details: |
                Adds support for rendering codeblocks as tabs in Platen. This render hook is only
                called if the language ID for the codeblock (i.e. `` ```languageID ``) is
                `tabs`. If a codeblock does include the language ID, the renderer looks for any
                nested codeblocks with the `tab` language ID to render as tabs in a shared
                group.

                For more information about using the codeblock to add tabbed content, see
                [the reference documentation][01].

                This value defaults to `platen/markup/tabs/codeblock`. You can replace it with a
                different value and defining a new partial, or override the existing partial by
                creating the file `layouts/partials/platen/markup/tabs/codeblock.html` in your
                own site or module.

                For more information about defining codeblock render hook partials, see
                [Defining a Codeblock Render Hook Partial][02] in the [Theme Guide][02].

                <!-- Reference Links -->
                [01]: /modules/platen/markup/tabs
                [02]: /styling
            type: string
            default: platen/markup/tabs/codeblock
  style:
    title: Markup Simple Style Module
    description: Defines the art markup's simple style module
    schematize:
      weight: 200
      skip_schema_render: true
      details: |
        Defines default styling for tabs created by the codeblock.

        When you use the [`tabs`][01] codeblock, the following SCSS is applied:

        ```scss
        .markdown .platen-tabs {
          margin-top: $padding-large;
          margin-bottom: $padding-large;

          border: $padding-minimal solid var(--gray-200);
          border-radius: $border-radius;

          overflow: hidden;

          display: flex;
          flex-wrap: wrap;

          label {
            display: inline-block;
            padding: $padding-medium $padding-large;
            border-bottom: $padding-minimal transparent;
            cursor: pointer;
          }

          .platen-tabs-content {
            order: 999; //Move content blocks to the end
            width: 100%;
            border-top: $padding-minimal solid var(--gray-100);
            padding: $padding-large;
            display: none;
          }

          input[type="radio"]:checked + label {
            border-bottom: $padding-minimal solid var(--color-link);
          }
          input[type="radio"]:checked + label + .platen-tabs-content {
            display: block;
          }
          input[type="radio"]:focus + label {
            @include outline;
          }
        }
        ```

        When you use the tabs codeblock, the content is placed in a `div` container with the
        `platen-tabs` class. Each tab uses a [sref:radio input] with its [sref:label] used as the
        selectable tab. Each tab's content is placed in a div with the `platen-tabs-content` and
        `markdown-inner` classes.

        ### Tab Container

        ```scss
        margin-top: $padding-large;
        margin-bottom: $padding-large;

        border: $padding-minimal solid var(--gray-200);
        border-radius: $border-radius;

        overflow: hidden;

        display: flex;
        flex-wrap: wrap;
        ```

        The container is uses [sref:`$padding-large`] to set the vertical margins. It adds a solid
        border with the width set to [sref:`$padding-minimal`], the border radius to
        [sref:`theme.variables.light_css.color-link`], and the color to
        [sref:`theme.variables.light_css.gray-200`] or [sref:`theme.variables.light_css.gray-200`]
        depending on the value of the [sref:`theme.config.mode`] setting.

        Is sets the [sref:`overflow`] attribute to hidden, which keeps any content that doesn't fit
        the container from displaying.

        It uses [sref:flex box] to display the tabs and their labels and uses [sref:`flex-wrap`].

        ### Tab Labels

        ```scss
        label {
          display: inline-block;
          padding: $padding-medium $padding-large;
          border-bottom: $padding-minimal transparent;
          cursor: pointer;
        }
        input[type="radio"]:checked + label {
          border-bottom: $padding-minimal solid var(--color-link);
        }
        input[type="radio"]:focus + label {
          @include outline;
        }
        ```

        The labels are added as inline blocks, allowing them to display side-by-side. They're use
        the value of [sref:`$padding-medium`] for the vertical padding
        and [sref:`$padding-large`] for the horizontal padding.

        They get a transparent bottom border with the width set to [sref:`$padding-minimal`]
        and have their cursor always display as a normal pointer.

        When the input for a label is checked, the label's border color switches from being
        transparent to the value of [sref:`theme.variables.light_css.color-link`] or
        [sref:`theme.variables.light_css.color-link`] depending on the [sref:`theme.config.mode`].

        When the input for a label is focused, the label uses the [sref:`theme.styles.utils.outline`]
        mixin to add a full box outline to the label.

        ### Tab Content

        ```scss
        .platen-tabs-content {
          order: 999; //Move content blocks to the end
          width: 100%;
          border-top: $padding-minimal solid var(--gray-100);
          padding: $padding-large;
          display: none;
        }

        input[type="radio"]:checked + label + .platen-tabs-content {
          display: block;
        }
        ```

        The tabs are all set to have an [sref:`order`] of 999, putting them together at the end of
        the flex box. They're set to have a width of 100% of their container and given a solid top
        border with a width of [sref:`$padding-minimal`] and their color set to either
        [sref:`theme.variables.light_css.gray-200`] or [sref:`theme.variables.dark_css.gray-200`]
        depending on the [sref:`theme.config.mode`]. Their padding is set to
        [sref:`$padding-large`].

        Finally, their display is set to `none` so they're hidden until selected. When a tab is
        selected, the display is changed `block`, making it visible.

        ### Overriding

        You can overwrite this definition for your own site or theme by creating the file
        `styles/markup/_tabs.scss` in your [assets folder][02], which defaults to `assets` in your
        project root.
        
        You can also create a new style module in the `styles/markup` folder and set this value to
        that module's name. If you do, omit the leading `_` and trailing `.scss`. For example, the
        name for the style module `assets/styles/markup/_foo.scss` is `foo`.

        ```details { .danger summary="Careful!" }
        Note that if you override the style module or this setting,you
        _entirely overwrite_ the default from the theme.
        ```

        For more information on authoring SCSS, see the [learning guide][03].

        <!-- Reference Links -->
        [01]: /modules/platen/markup/tabs
        [02]: https://gohugo.io/getting-started/directory-structure/#directory-structure-explained
        [03]: https://sass-lang.com/guide
        [sref:`flex-wrap`]: mdn.css:flex-wrap
        [sref:`order`]: mdn.css:order
        [sref:`overflow`]: mdn.css:overflow
        [sref:`theme.config.mode`]: platen.site.theme.config.mode
        [sref:`theme.styles.utils.outline`]: platen.site.theme.styles.utils.outline
        [sref:`$border-radius`]: platen.site.theme.variables.basic_scss.border-radius
        [sref:`$padding-large`]: platen.site.theme.variables.basic_scss.padding-large
        [sref:`$padding-medium`]: platen.site.theme.variables.basic_scss.padding-large
        [sref:`$padding-minimal`]: platen.site.theme.variables.basic_scss.padding-minimal
        [sref:`theme.variables.dark_css.gray-200`]: platen.site.theme.variables.dark_css.gray-200
        [sref:`theme.variables.dark_css.link-color`]: platen.site.theme.variables.dark_css.link-color
        [sref:`theme.variables.light_css.gray-200`]: platen.site.theme.variables.light_css.gray-200
        [sref:`theme.variables.light_css.link-color`]: platen.site.theme.variables.light_css.link-color
        [sref:flex box]: mdn.css:CSS_Flexible_Box_Layout
        [sref:radio input]: mdn.html.element:input/radio
        [sref:label]: mdn.html.element:label
    type: string
    default: tabs
