{{- $context           := . -}}
{{- $theme             := $context.Site.Params.Platen.Theme -}}
{{- $variablesPartial  := "platen/utils/styles/variables.scss" -}}
{{- $importPartial     := "platen/utils/styles/import.scss" -}}
{{- $fontsPartial      := "platen/utils/styles/fonts.scss" -}}
{{- $shortcodesPartial := "platen/utils/styles/shortcodes.scss" -}}
// Adds the basic SCSS variables. These can be strings or maps. Values in this
// group must not reference other values, only primitives.
{{- range $name, $value := $theme.Variables.BasicSCSS -}}
  {{ $params := dict "Name" $name "Value" $value "IsDefault" true }}
  {{ partial $variablesPartial $params }}
{{ end }}

// Adds calculated SCSS variables which depend on previously declared variables
// defined in the basic list.
{{- range $name, $value := $theme.Variables.CalculatedSCSS }}
  {{ $params := dict "Name" $name "Value" $value "IsDefault" true }}
  {{ partial $variablesPartial $params }}
{{ end }}

// Themes use custom CSS properties as variables. They can be selected on a per
// mode basis. Custom color themes can be implemented by overriding these values
// in the site configuration. Further customization requires more in-depth
// handling.
@mixin theme-light {
  {{ range $name, $value := $theme.Variables.LightCSS }}
    {{ $params := dict "Name" $name "Value" $value "IsCSS" true }}
    {{ partial $variablesPartial $params }}
  {{ end }}
}

@mixin theme-dark {
  {{ range $name, $value := $theme.Variables.DarkCSS }}
    {{ $params := dict "Name" $name "Value" $value "IsCSS" true }}
    {{ partial $variablesPartial $params }}
  {{ end }}
}

// Load user defined variables before continuing. This is an alternative to
// adding variables through the configuration.
@import "variables";

// Modes determine whether the site uses light mode, dark mode, or automatically
// shows the same mode as the site user's system preferences.
@import "modes/{{ default "auto" $theme.Mode }}";

// Normalize the styles before applying specifics
@import "normalize";

// Utils need to be loaded before more specific / component-oriented styles
// because they may/will use these utils.
{{ partial $importPartial (dict "StylesMap" $theme.Styles.Utils "RootFolder" "utils") }}

// The base styles for general structure on the site.
{{ partial $importPartial (dict "StylesMap" $theme.Styles.Base "RootFolder" "base") }}

// Applies to platen-specific components, but general - specifics for shortcodes
// are handled on a per-shortcode basis.
{{ partial $importPartial (dict "StylesMap" $theme.Styles.Platen "RootFolder" "platen") }}

// Ensures functionality on mobile.
{{ partial $importPartial (dict "StylesMap" $theme.Styles.Mobile "RootFolder" "mobile") }}

// Applies when the screen is particularly wide.
{{ partial $importPartial (dict "StylesMap" $theme.Styles.Wide "RootFolder" "wide") }}

// Add in all of the fonts.
{{ partial $fontsPartial $theme.Fonts }}

// Settings for when a site user tries to print a web page
{{ partial $importPartial (dict "StylesMap" $theme.Printing.Styles "RootFolder" "printing") }}

// Markdown covers article/post content, not the site-wide or structural items.
{{ partial $importPartial (dict "StylesMap" $theme.Styles.Markdown "RootFolder" "markdown") }}

{{ $builtinStyles := slice "Utils" "Base" "Platen" "Mobile" "Wide" "Markdown" }}
{{ range $styleGroupName, $styles := $theme.Styles }}
  {{ $rootFolder := default (lower $styleGroupName) $styles.RootFolder }}
  {{ partial $importPartial (dict "StylesMap" $styles "RootFolder" $rootFolder) }}
{{ end }}

{{ range $feature, $settings := $context.Site.Params.Platen.Features -}}
  {{- if $settings.Enabled -}}
    {{- with $settings.Partials.Style }}
      {{ partial . $context }}
    {{- end -}}
  {{- end -}}
{{- end -}}

// Shortcodes must always load _after_ all more normal/universal items.
{{ partial $shortcodesPartial $context.Site.Params.Platen.Shortcodes }}

// Custom site-maintainer defined styles.
@import "custom";
